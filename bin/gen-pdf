#! /usr/bin/env ruby
#
# Generate a PDF from markdown input (paper.md) in dir
#
# Usage:   gen-pdf [--debug] dir [event] [paper.pdf] [git-url]
#
# Example: ./bin/gen-pdf ./example/logic Japan2019 output.pdf
#          ./bin/gen-pdf --debug ./example/logic Japan2019 output.tex
#
# Note that combining --debug with PDF output may lead to an error. See
# https://github.com/jgm/pandoc/issues/5997

class GenPdfError < StandardError
end

rootpath = File.dirname(File.dirname(__FILE__))
$: << File.join(rootpath,'lib')

require 'fileutils'
require 'time'
require 'bhxiv/markdown' # QC methods for YAML header

p ARGV

dir=ARGV.shift
if dir == "--debug"
  dir=ARGV.shift
  is_debug = true
end
dir="." if not dir
print "Scanning directory \"#{dir}\" for paper source\n"

bioh=ARGV.shift
if not bioh
  bioh= "Covid2020" # default
end
event = bioh.to_sym

outfn=ARGV.shift
outfn="paper.pdf" if not outfn

git_url=ARGV.shift # optional URL passed in by web app

$stderr.print("Generating #{outfn}\n")
Dir.chdir(dir) do
  File.unlink(outfn) if File.exist?(outfn)
end

papermd = dir + "/" + "paper.md"
raise "Can not find markdown file #{papermd}" if not File.exist?(papermd)

header = md_parser(papermd)
meta = meta_expand(header,event)
md_meta_checker(meta)

paperbib = dir + "/" + "paper.bib"
if not File.exist?(paperbib)
  $stderr.print "WARNING: can not find bibtex file #{paperbib}\n"
  print `touch #{paperbib}`
end

rootdir=File.expand_path(File.dirname(File.dirname(__FILE__)))
resources=rootdir + "/resources/biohackrxiv"

# EVENT_TYPE expands the metadata used for generating the PDF. A special
# type is "Other" which is expanded using the metadata from the document
# itself, see metadata.rb

EVENT_TYPE = {
  "BH22EU": {
    title: "BioHackathon Europe 2022",
    URL:   "https\://www.biohackathon-europe.org//",
    location: "Paris, France, 2022"
  },
  "BH21EU": {
    title: "BioHackathon Europe 2021",
    URL:   "https\://www.biohackathon-europe.org//",
    location: "Barcelona, Spain, 2021"
  },
  "BH20EU": {
    title: "BioHackathon Europe 2020",
    URL:   "https\://www.biohackathon-europe.org//",
    location: "Virtual conference 2020"
  },
  "BCC2020": {
    title: "Bioinformatics Community Conference 2020 CollaborationFest (CoFest)",
    URL:   "https\://bcc2020.github.io/cofest/",
    location: "Virtual conference 2020"
  },
  "Covid2020": {
    title: "COVID-19 BioHackathon",
    URL:   "https\://github.com/virtual-biohackathons/covid-19-bh20",
    location: "Virtual conference 2020"
  },
  "France2019": {
    title: "BioHackathon EUROPE",
    URL:   "https\://www.biohackathon-europe.org//",
    location: "Paris, France, 2019"
  },
  "Japan2019": {
    title: "NBDC/DBCLS BioHackathon",
    URL:   "http\://2019.biohackathon.org/",
    location: "Fukuoka, Japan, 2019"
  },
  "Japan2018": {
    title: "NBDC/DBCLS BioHackathon",
    URL:   "http\://2018.biohackathon.org/",
    location: "Matsue, Japan, 2018"
  },
  "Other": nil # reserved. See metadata.rb
}

raise GenPdfError,"event undefined" if not event
EVENT =
  if event == :Other
    { title: meta['biohackathon_name'],
      URL:   meta['biohackathon_url'],
      location: meta['biohackathon_location']
    }
  else
    EVENT_TYPE[bioh.to_sym]
  end

# Plug things in that are not on command line

git_url = meta['git_url'] if not git_url and meta.has_key?('git_url')
raise GenPdfError,"git_url is undefined in metadata - provide 'git_url' in the markdown header as a reference to the git repo if you are using a zip file" if not git_url

JOURNAL='biohackrxiv'
JOURNAL_NAME='BioHackrXiv.org'
JOURNAL_URL='https://biohackrxiv.org/'
TEX=resources + "/latex.template"
CSL=resources + "/apa-new.csl"
EXTRACT_CITO=resources + "/filters/extract-cito.lua"
INSERT_CITO=resources + "/filters/insert-cito-in-ref.lua"
JOURNAL_LOGO=resources + "/logo.png"

time = Time.new
date = time.strftime("%d %b %Y")

cmd = <<COMMAND
      #{ ( is_debug ? "--verbose" : "") }
      -V journal_name='#{JOURNAL_NAME}'
      -V journal_url='#{JOURNAL_URL}'
      -V logo_path='#{JOURNAL_LOGO}'
      -V year='#{time.year}'
      -V submitted='#{date}'
      -V git_url='#{git_url}'
      -V event_title='#{EVENT[:title]}'
      -V event_url='#{EVENT[:URL]}'
      -V event_location='#{EVENT[:location]}'
      -V geometry:margin=1in
      --from markdown+autolink_bare_uris
      --template '#{TEX}'
      --no-check-certificate
      --csl=#{CSL}
      --lua-filter='#{EXTRACT_CITO}'
      #{ ( paperbib ? "--citeproc" : "") }
      --lua-filter='#{INSERT_CITO}'
      -s
      --output='#{outfn}'
      paper.md
COMMAND


print cmd
cmd2 = 'pandoc '+cmd.split(/\s*\n\s*/).join(" ")

print "Change into directory #{dir}\n"
Dir.chdir(dir) do
  print "Executing "
  p cmd2
  print `#{cmd2}`
  if File.exist?(outfn)
    print("Generated #{outfn}!\n")
  else
    # this is a bit odd, but when no path is supplied we need to get
    # the local path
    outfn2 = Dir.pwd+"/"+outfn
    if File.exist?(outfn2)
      print("Generated #{outfn}!\n")
    else
      print("Failed to generate #{outfn}!\n")
      exit(2)
    end
  end
end
